// Code generated by mockery v2.45.0. DO NOT EDIT.

package persistence

import (
	mock "github.com/stretchr/testify/mock"

	task "todo/pkg/task"
)

// MockPersistence is an autogenerated mock type for the Persistence type
type MockPersistence struct {
	mock.Mock
}

type MockPersistence_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersistence) EXPECT() *MockPersistence_Expecter {
	return &MockPersistence_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields:
func (_m *MockPersistence) Load() ([]task.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 []task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]task.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []task.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersistence_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockPersistence_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockPersistence_Expecter) Load() *MockPersistence_Load_Call {
	return &MockPersistence_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockPersistence_Load_Call) Run(run func()) *MockPersistence_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersistence_Load_Call) Return(_a0 []task.Task, _a1 error) *MockPersistence_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersistence_Load_Call) RunAndReturn(run func() ([]task.Task, error)) *MockPersistence_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: records
func (_m *MockPersistence) Save(records []task.Task) error {
	ret := _m.Called(records)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]task.Task) error); ok {
		r0 = rf(records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersistence_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockPersistence_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - records []task.Task
func (_e *MockPersistence_Expecter) Save(records interface{}) *MockPersistence_Save_Call {
	return &MockPersistence_Save_Call{Call: _e.mock.On("Save", records)}
}

func (_c *MockPersistence_Save_Call) Run(run func(records []task.Task)) *MockPersistence_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]task.Task))
	})
	return _c
}

func (_c *MockPersistence_Save_Call) Return(_a0 error) *MockPersistence_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersistence_Save_Call) RunAndReturn(run func([]task.Task) error) *MockPersistence_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersistence creates a new instance of MockPersistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersistence(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersistence {
	mock := &MockPersistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
